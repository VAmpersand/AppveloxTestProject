/// This file is generated by Weaver 0.12.3
/// DO NOT EDIT!
import Alamofire
import Foundation
import SWXMLHash
import SnapKit
import UIKit
// MARK: - NewsInfoViewModel
protocol NewsInfoViewModelDependencyResolver {
    var news: Item { get }
}
final class NewsInfoViewModelDependencyContainer: NewsInfoViewModelDependencyResolver {
    let news: Item
    init(news: Item) {
        self.news = news
    }
}
// MARK: - NewsInfoScene
protocol NewsInfoSceneDependencyResolver {
    var parentRouter: Router { get }
    var news: Item { get }
    var newsInfoRouter: NewsInfoRouter { get }
    func newsInfoViewModel(news: Item) -> NewsInfoViewModel
    var newsInfoController: NewsInfoController { get }
}
final class NewsInfoSceneDependencyContainer: NewsInfoSceneDependencyResolver {
    let parentRouter: Router
    let news: Item
    var newsInfoRouter: NewsInfoRouter {
        let value = NewsInfoRouter()
        return value
    }
    func newsInfoViewModel(news: Item) -> NewsInfoViewModel {
        let dependencies = NewsInfoViewModelDependencyContainer(news: news)
        let value = NewsInfoViewModel(injecting: dependencies)
        return value
    }
    var newsInfoController: NewsInfoController {
        let value = NewsInfoController()
        return value
    }
    init(parentRouter: Router, news: Item) {
        self.parentRouter = parentRouter
        self.news = news
    }
}
// MARK: - NewsListRouter
protocol NewsListRouterDependencyResolver {
    func newsInfoScene(parentRouter: Router, news: Item) -> NewsInfoScene
}
final class NewsListRouterDependencyContainer: NewsListRouterDependencyResolver {
    func newsInfoScene(parentRouter: Router, news: Item) -> NewsInfoScene {
        let dependencies = NewsInfoSceneDependencyContainer(parentRouter: parentRouter, news: news)
        let value = NewsInfoScene(injecting: dependencies)
        return value
    }
    init() {
    }
}
// MARK: - NewsListScene
protocol NewsListSceneDependencyResolver {
    var parentRouter: Router { get }
    var newsListRouter: NewsListRouter { get }
    var newsListViewModel: NewsListViewModel { get }
    var newsListController: NewsListController { get }
}
final class NewsListSceneDependencyContainer: NewsListSceneDependencyResolver {
    let parentRouter: Router
    var newsListRouter: NewsListRouter {
        let value = NewsListRouter(injecting: NewsListRouterDependencyContainer())
        return value
    }
    var newsListViewModel: NewsListViewModel {
        let value = NewsListViewModel(injecting: NewsListViewModelDependencyContainer())
        return value
    }
    var newsListController: NewsListController {
        let value = NewsListController()
        return value
    }
    init(parentRouter: Router) {
        self.parentRouter = parentRouter
    }
}
// MARK: - NewsListViewModel
protocol NewsListViewModelDependencyResolver {
    var networkService: NetworkService { get }
}
final class NewsListViewModelDependencyContainer: NewsListViewModelDependencyResolver {
    private var _networkService: NetworkService?
    var networkService: NetworkService {
        if let value = _networkService { return value }
        let value = NetworkService()
        _networkService = value
        return value
    }
    init() {
        _ = networkService
    }
}
// MARK: - MainRouter
protocol MainRouterDependencyResolver {
    func newsListScene(parentRouter: Router) -> NewsListScene
}
final class MainRouterDependencyContainer: MainRouterDependencyResolver {
    func newsListScene(parentRouter: Router) -> NewsListScene {
        let dependencies = NewsListSceneDependencyContainer(parentRouter: parentRouter)
        let value = NewsListScene(injecting: dependencies)
        return value
    }
    init() {
    }
}
// MARK: - SceneDelegate
protocol SceneDelegateDependencyResolver {
    var mainRouter: MainRouter { get }
}
final class SceneDelegateDependencyContainer: SceneDelegateDependencyResolver {
    private var _mainRouter: MainRouter?
    var mainRouter: MainRouter {
        if let value = _mainRouter { return value }
        let value = MainRouter(injecting: MainRouterDependencyContainer())
        _mainRouter = value
        return value
    }
    init() {
        _ = mainRouter
    }
}